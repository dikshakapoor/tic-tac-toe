{"version":3,"sources":["Components/PlayerOption.js","Components/Status.js","app.constants.js","Components/SecondPlayer.js","App.js","reportWebVitals.js","index.js"],"names":["Player","e","setPlayer","this","props","target","value","class","className","type","name","onClick","handleSelectedPlayerOption","Component","Status","setPlayerOption","firstPlayer","secondPlayer","currentPlayer","board","isWinner","winnerPlayer","includes","option","PlayerOption","handleSetPlayer","WINNING_COMBINATION","PLAYING_OPTIONS","SECOND_PLAYER_OPTIONS","USER_COSTANT","SecondPlayer","event","selectedSecondPlayer","id","handleSecondPlayer","handleSelectedSecondPlayer","App","state","undefined","Array","fill","index","length","firstWinningIndex","secondWinningIndex","thirdWinningIndex","setState","newPlayer","checkWinner","emptyIndexBoxs","map","box","push","Math","floor","random","secondPlayerValue","handleBoxClick","secondPlayerName","setSecondPlayer","renderBoxes","handleReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NA8BeA,G,8LAzBYC,IAGvBC,EAFmBC,KAAKC,MAAlBF,WACuBD,EAAEI,OAAOC,S,+BAIhC,IAAD,OACP,OACC,gCACC,uBAAOC,MAAM,WAAb,8BACA,sBAAKA,MAAM,UAAX,UACE,kCACE,oBAAIA,MAAM,SAAV,iBACC,uBAASC,UAAU,QAAQC,KAAK,QAAQC,KAAK,SAASJ,MAAM,IAAIK,QAAW,SAACV,GAAD,OAAK,EAAKW,2BAA2BX,SAEnH,kCACE,oBAAIM,MAAM,SAAV,iBACE,uBAAOC,UAAU,QAAQC,KAAK,QAAQC,KAAK,SAASJ,MAAM,IAAIK,QAAW,SAACV,GAAD,OAAK,EAAKW,2BAA2BX,mB,GAnBnGY,cCoBNC,E,8KAhBEb,IAEfc,EAD0BZ,KAAKC,MAAxBW,iBACSd,K,+BAGP,IAAD,SACmDE,KAAKC,MAAxDY,EADA,EACAA,YAAaC,EADb,EACaA,aAAcC,EAD3B,EAC2BA,cAAeC,EAD1C,EAC0CA,MAClD,GAAIH,EAAYI,UAAYH,EAAaG,SAAS,CAClD,IAAMC,EAAeL,EAAYI,SAAUJ,EAAYN,KAAOO,EAAaP,KAC3E,OAAO,oBAAGF,UAAU,WAAb,wBAAoCa,EAApC,OAEP,OAAKF,EAAMG,SAAS,MACZN,EAAYO,OAAoE,oBAAGf,UAAU,WAAb,4BAAwCU,EAAcR,KAAtD,OAA3D,cAACc,EAAD,CAActB,UAAW,SAACD,GAAD,OAAK,EAAKwB,gBAAgBxB,MAD9C,mBAAGO,UAAU,WAAb,4B,GAZfK,aCJRa,EAAsB,CACjC,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,MAGEC,EACT,IADSA,EAET,IAGSC,EACD,WADCA,EAEH,SAGGC,EAAe,OCMbC,E,yLAtBaC,GAC1B,IAAMC,EAAuBD,EAAM1B,OAAO4B,IAE1CC,EAD6B/B,KAAKC,MAA3B8B,oBACYF,K,+BAGX,IAAD,OACP,OACA,qCACA,sBAAKxB,UAAU,QAAf,UACE,oBAAID,MAAM,SAAV,eACA,oBAAIA,MAAM,SAAV,kBAED,mBAAGA,MAAM,OAAT,qCACC,sBAAKC,UAAU,SAAf,UACA,wBAAQC,KAAK,SAASF,MAAM,SAAS0B,GAAIL,EAA8BjB,QAAS,SAACV,GAAD,OAAK,EAAKkC,2BAA2BlC,IAArH,SAA0H2B,IAC1H,wBAAQnB,KAAK,SAASF,MAAM,SAAS0B,GAAIL,EAAgCjB,QAAS,SAACV,GAAD,OAAK,EAAKkC,2BAA2BlC,IAAvH,SAA4H2B,c,GAjBrGf,aCoIZuB,E,kDA3Hb,WAAYhC,GAAO,IAAD,8BAChB,cAAMA,IACDiC,MAAM,CACTpB,aAAc,CACbP,UAAM4B,EACNf,YAAQe,EACRlB,UAAW,GACZJ,YAAa,CACZN,KAAMmB,EACNN,YAAQe,EACRlB,UAAU,GAEXF,cAAe,KACfC,MAAQoB,MAAM,GAAGC,KAAK,OAbR,E,0DAkBhB,IAAK,IAAIC,EAAQ,EAAGA,EAAQf,EAAoBgB,OAAQD,IAAQ,CAAC,IAAD,cACKf,EAAoBe,GADzB,GACvDE,EADuD,KACpCC,EADoC,KAChBC,EADgB,OAElB1C,KAAKkC,MAA1ClB,EAFuD,EAEvDA,MAAOH,EAFgD,EAEhDA,YAAcC,EAFkC,EAElCA,aAC5B,GAAIE,EAAMwB,IAAqBxB,EAAMyB,IAAuBzB,EAAM0B,IAAsB1B,EAAMwB,KAAuBxB,EAAMyB,IAAuBzB,EAAMwB,KAAuBxB,EAAM0B,GAClL,OAAI7B,EAAYO,SAAWJ,EAAMwB,GAC3BxC,KAAK2C,SAAS,CACnB9B,YAAY,2BAAKA,GAAN,IAAmBI,UAAU,MAGnCjB,KAAK2C,SAAS,CAClB7B,aAAa,2BAAKA,GAAN,IAAoBG,UAAU,S,qCAMpCqB,GAAM,MACwCtC,KAAKkC,MAAzDrB,EADY,EACZA,YAAaC,EADD,EACCA,aAAcE,EADf,EACeA,MAAQD,EADvB,EACuBA,cAC1C,GAAqB,OAAjBC,EAAMsB,KAAoBzB,EAAYI,WAAaH,EAAaG,SAAU,CAC5ED,EAAMsB,GAASvB,EAAcK,OAC7B,IAAMwB,EAAY7B,EAAcK,SAAWP,EAAYO,OAASN,EAAcD,EAMjF,GALGb,KAAK2C,SAAS,CACZ3B,MAAM,YAAIA,GACVD,cAAe6B,IAEnB5C,KAAK6C,cACH/B,EAAaP,OAASkB,GAAkCV,EAAcR,OAASkB,IAAmCZ,EAAYI,SAAU,CAC1I,IAAM6B,EAAgB,GACtB9B,EAAM+B,KAAI,SAACC,EAAKV,GACd,OAAY,OAARU,EACEF,EAAeG,KAAKX,GACpB,QAEPtB,EAD4B8B,EAAeI,KAAKC,MAAMD,KAAKE,SAAUN,EAAeP,UACvDzB,EAAaM,OAC1CpB,KAAK2C,SAAS,CACb3B,MAAM,YAAIA,GACXD,cAAeF,IAEhBb,KAAK6C,kB,sCAKOzB,GAAO,MACepB,KAAKkC,MAAlCrB,EADc,EACdA,YAAaC,EADC,EACDA,aACduC,EAAoBjC,IAAWI,EAAoBA,EAAoBA,EAC7ExB,KAAK2C,SAAS,CAAC9B,YAAY,2BACtBA,GADqB,IAExBO,WAEFN,aAAa,2BACRA,GADO,IAEVM,OAAQiC,IAEVtC,cAAc,2BACPF,GADM,IAETO,e,oCAKU,IAAD,OAEX,OADgBpB,KAAKkC,MAAdlB,MACM+B,KAAI,SAACC,EAAIV,GAAL,OAAe,qBAAKjC,UAAS,cAAU2C,EAAV,SAAkCxC,QAAS,kBAAM,EAAK8C,eAAehB,IAAnF,SAA4FU,GAAnDV,Q,sCAG5DT,GACb7B,KAAK2C,SAAS,CACd7B,aAAc,CACZP,KAAMsB,O,oCAKR7B,KAAK2C,SAAS,CACd7B,aAAc,CACdP,UAAM4B,EACNf,YAAQe,EACRlB,UAAW,GAEXJ,YAAa,CACbN,KAAOmB,EACPN,YAAQe,EACRlB,UAAU,GAEZF,cAAe,KACfC,MAAQoB,MAAM,GAAGC,KAAK,U,+BAGf,IAAD,SACoDrC,KAAKkC,MAAxDrB,EADD,EACCA,YAAaC,EADd,EACcA,aAAcC,EAD5B,EAC4BA,cAAeC,EAD3C,EAC2CA,MAD3C,EAEwDF,GAAe,GAA7DuC,EAFV,EAECjC,OAAmCmC,EAFpC,EAE6BhD,KACnC,OACE,sBAAKF,UAAU,YAAf,WACGkD,GAAoB,cAAC,EAAD,CAAcxB,mBAAoB,SAACF,GAAD,OAAyB,EAAK2B,gBAAgB3B,MACtG0B,GAAoB,cAAC,EAAD,CAAQxC,cAAeA,EAAeF,YAAaA,EAAaC,aAAcA,EAAcE,MAAQA,EAAOJ,gBAAiB,SAACQ,GAAD,OAAW,EAAKR,gBAAgBQ,MACjL,qBAAKf,UAAU,QAAf,SACCgD,GAAqBrD,KAAKyD,iBAEzB5C,EAAYI,UAAYH,EAAaG,WAAYD,EAAMG,SAAS,QAAW,wBAAQX,QAAS,kBAAM,EAAKkD,eAAerD,UAAU,SAArD,wC,GAvH/DK,aCDHiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.405aa00b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\n/* this file option selection 'X' or 'O' by user*/\nclass Player extends Component {\n\nhandleSelectedPlayerOption(e){\n    const{setPlayer} = this.props;\n    const selectedPlayerOption = e.target.value;\n    setPlayer(selectedPlayerOption);\n}\n\nrender() {\n  return (\n   <div>\n    <label class=\"mainText\"> Pick your side </label>\n    <div class=\"players\">\n      <label>\n        <h1 class=\"xLabel\"> X </h1> \n         <input   className=\"input\" type=\"radio\" name=\"player\" value=\"x\" onClick = {(e)=>this.handleSelectedPlayerOption(e)}/>\n      </label>\n      <label>\n        <h1 class=\"oLabel\"> O </h1> \n          <input className=\"input\" type=\"radio\" name=\"player\" value=\"o\" onClick = {(e)=>this.handleSelectedPlayerOption(e)}/>\n      </label>\n    </div>\n  </div>\n        )\n    }\n};\n\nexport default Player;","import React, {Component} from 'react';\n\nimport PlayerOption from './PlayerOption';\nimport '../App.css';\n\n/* this is for indicating the winner, next player in game and render PlayerOption*/\nclass Status extends Component{\n handleSetPlayer(e){\n  const {setPlayerOption} = this.props;\n  setPlayerOption(e);\n}\n \n render() {\n  const { firstPlayer, secondPlayer, currentPlayer, board} = this.props;\n  if (firstPlayer.isWinner || secondPlayer.isWinner){\n  const winnerPlayer = firstPlayer.isWinner? firstPlayer.name : secondPlayer.name;\n  return <p className=\"mainText\"> Winner is {winnerPlayer} </p>\n  }\n  if (!board.includes(null)) return <p className=\"mainText\"> No winner</p>;\n  return !firstPlayer.option ? <PlayerOption setPlayer={(e)=>this.handleSetPlayer(e)}/> : <p className=\"mainText\">Next Player is {currentPlayer.name} </p> \n    }\n}\n\nexport default Status;","// this file is for saving constants\n\nexport const WINNING_COMBINATION = [\n  [\"0\",\"1\",\"2\"],\n  [\"3\",\"4\",\"5\"],\n  [\"6\",\"7\",\"8\"],\n  [\"0\",\"3\",\"6\"],\n  [\"1\",\"4\",\"7\"],\n  [\"2\",\"5\",\"8\"],\n  [\"0\",\"4\",\"8\"],\n  [\"2\",\"4\",\"6\"],\n  ];\n\nexport const PLAYING_OPTIONS = {\n X :'x',\n O: 'o',\n}\n\nexport const SECOND_PLAYER_OPTIONS = {\n  COMPUTER: 'Computer',\n  FRIEND: 'Friend',\n}\n\nexport const USER_COSTANT = \"User\";\n","import React, {Component} from 'react';\n\nimport {SECOND_PLAYER_OPTIONS} from '../app.constants';\nimport '../App.css';\n\n/* this file is for selecting second player : computer or friend by user */\nclass SecondPlayer extends Component {\n handleSelectedSecondPlayer(event){\n  const selectedSecondPlayer = event.target.id;\n  const {handleSecondPlayer} = this.props;\n  handleSecondPlayer(selectedSecondPlayer);\n}\n\n render(){\n  return (\n  <>\n  <div className=\"label\">\n    <h1 class=\"xLabel\">X</h1>\n    <h1 class=\"oLabel\">O</h1>\n  </div>\n   <p class=\"text\">Choose your player mode</p>\n    <div className=\"player\">\n    <button type='button' class='button' id={SECOND_PLAYER_OPTIONS.FRIEND} onClick={(e)=>this.handleSelectedSecondPlayer(e)}>{SECOND_PLAYER_OPTIONS.FRIEND}</button>\n    <button type='button' class='button' id={SECOND_PLAYER_OPTIONS.COMPUTER} onClick={(e)=>this.handleSelectedSecondPlayer(e)}>{SECOND_PLAYER_OPTIONS.COMPUTER}</button>\n  </div>\n </>)\n}\n};\n\nexport default SecondPlayer;","import React, {Component} from 'react';\n\nimport Status from './Components/Status';\nimport SecondPlayer from './Components/SecondPlayer';\nimport { WINNING_COMBINATION, PLAYING_OPTIONS, SECOND_PLAYER_OPTIONS ,USER_COSTANT } from './app.constants.js';\n\nimport './App.css';\n\n/*assumptions :\n1. user(or first player) will have choice to select options ('X' or 'Y').\n2. second player can be a friend or computer, incase its computer the selection of boxes will be random(from any empty box).\n3. the game can be reset only when all board boxes are filled or game is won by any of the player \n*/\nclass App extends Component {\n\n  constructor(props){ // initializing players\n    super(props)\n    this.state={\n      secondPlayer: {\n       name: undefined,\n       option: undefined,\n       isWinner : false},     \n      firstPlayer: {\n       name: USER_COSTANT,\n       option: undefined,\n       isWinner: false,\n      },\n      currentPlayer: null,\n      board : Array(9).fill(null), \n    }\n  }\n\n  checkWinner(){ // this function is used to match winning combination and incase condition is matched sets constant isWinner \n    for (let index = 0; index < WINNING_COMBINATION.length; index++){\n      const [firstWinningIndex, secondWinningIndex, thirdWinningIndex] = WINNING_COMBINATION[index];\n      const {board, firstPlayer , secondPlayer} = this.state;\n      if (board[firstWinningIndex]&& board[secondWinningIndex] && board[thirdWinningIndex] && board[firstWinningIndex] === board[secondWinningIndex] && board[firstWinningIndex] === board[thirdWinningIndex]){\n         if( firstPlayer.option === board[firstWinningIndex] ){\n        return this.setState({\n          firstPlayer: {...firstPlayer, isWinner: true}\n       })\n         }\n        return this.setState({\n           secondPlayer: {...secondPlayer, isWinner: true}\n       })\n    }\n  }\n  }\n\n  handleBoxClick(index){ //sets the player option in board array\n    const {firstPlayer, secondPlayer, board , currentPlayer} = this.state;\n    if (board[index] === null && !firstPlayer.isWinner && !secondPlayer.isWinner ){  \n      board[index] = currentPlayer.option;     \n      const newPlayer = currentPlayer.option === firstPlayer.option ? secondPlayer: firstPlayer;  \n      this.setState({\n        board:[...board],\n        currentPlayer: newPlayer,\n    })\n    this.checkWinner();\n   if(secondPlayer.name === SECOND_PLAYER_OPTIONS.COMPUTER && currentPlayer.name !== SECOND_PLAYER_OPTIONS.COMPUTER && !firstPlayer.isWinner) { \n    const emptyIndexBoxs= [];\n    board.map((box, index) => {\n      if (box === null) \n     return emptyIndexBoxs.push(index);\n     return null})\n     const randomEmptyBoxIndex = emptyIndexBoxs[Math.floor(Math.random()* emptyIndexBoxs.length)];\n     board[randomEmptyBoxIndex] = secondPlayer.option;\n     this.setState({\n      board:[...board],\n     currentPlayer: firstPlayer,\n    })\n    this.checkWinner();\n  }\n}\n}\n\nsetPlayerOption(option){ // set the options for players\n  const {firstPlayer, secondPlayer} = this.state;\n  const secondPlayerValue = option === PLAYING_OPTIONS.X ? PLAYING_OPTIONS.O : PLAYING_OPTIONS.X;\n  this.setState({firstPlayer: {\n    ...firstPlayer,\n    option\n  },\n  secondPlayer: {\n    ...secondPlayer,\n    option: secondPlayerValue,\n  },\n  currentPlayer: {\n      ...firstPlayer,\n      option\n  }\n})\n}\n\n renderBoxes() {\n    const {board} = this.state;\n    return board.map((box,index) => <div className= {`box ${box}Label`} key={index} onClick={() => this.handleBoxClick(index)}>{box}</div>)\n  }\n\n setSecondPlayer(selectedSecondPlayer){ //sets the second player\n    this.setState({\n    secondPlayer: {\n      name: selectedSecondPlayer\n    }})\n  }\n\n  handleReset(){ // this gives functionality to reset in case a game is finished \n    this.setState({ \n    secondPlayer: {\n    name: undefined,\n    option: undefined,\n    isWinner : false\n },     \n    firstPlayer: {\n    name:  USER_COSTANT,\n    option: undefined,\n    isWinner: false,\n  },\n  currentPlayer: null,\n  board : Array(9).fill(null),})\n}\n\nrender(){\n  const {firstPlayer, secondPlayer ,currentPlayer, board} = this.state;\n  const {option : secondPlayerValue, name : secondPlayerName} = secondPlayer ||{};\n  return(\n    <div className=\"container\">\n    { !secondPlayerName && <SecondPlayer handleSecondPlayer={(selectedSecondPlayer) =>this.setSecondPlayer(selectedSecondPlayer)}/>}\n    {secondPlayerName && <Status currentPlayer={currentPlayer} firstPlayer={firstPlayer} secondPlayer={secondPlayer} board= {board} setPlayerOption={(option)=> this.setPlayerOption(option)}/>}\n    <div className=\"board\">\n    {secondPlayerValue && this.renderBoxes()}\n    </div>\n    {(firstPlayer.isWinner || secondPlayer.isWinner|| !board.includes(null) ) && <button onClick={() => this.handleReset()} className=\"button\">Press to reset game</button>}\n    </div>\n  )\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}